import os
import numpy as np
import cv2
import mediapipe as mp

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ input ‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• output
VIDEOS_DIR = os.path.join(os.path.dirname(__file__), '..', 'videos')
DATA_DIR = os.path.join(os.path.dirname(__file__), '..', 'data')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á MediaPipe Pose ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏∏‡∏î landmark ‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á)
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=False)

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• landmark (X) ‡πÅ‡∏•‡∏∞ label (y)
X, y = [], []

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ label (‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ = ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô videos/)
for label in os.listdir(VIDEOS_DIR):
    label_dir = os.path.join(VIDEOS_DIR, label)
    if not os.path.isdir(label_dir):
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    print(f"üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• label: {label}")
    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå label
    for video_file in os.listdir(label_dir):
        if not video_file.lower().endswith(('.mp4', '.avi', '.mov')):
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        print(f"  üéûÔ∏è ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {video_file}")
        cap = cv2.VideoCapture(os.path.join(label_dir, video_file))
        frame_count = 0
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        while True:
            ret, frame = cap.read()
            if not ret:
                break  # ‡∏à‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MediaPipe
            results = pose.process(frame_rgb)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö landmark
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö landmark ‡πÑ‡∏î‡πâ
            if results.pose_landmarks:
                # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î landmark (x, y, z, visibility) ‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß flatten ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                landmarks = np.array([[lm.x, lm.y, lm.z, lm.visibility] for lm in results.pose_landmarks.landmark]).flatten()
                X.append(landmarks)
                y.append(label)
                frame_count += 1
        print(f"     ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ {frame_count} frame")
        cap.release()  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à

# ‡πÅ‡∏õ‡∏•‡∏á list ‡πÄ‡∏õ‡πá‡∏ô numpy array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö ML
X = np.array(X)
y = np.array(y)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)
# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• feature (X) ‡πÅ‡∏•‡∏∞ label (y) ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .npy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö ML ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
np.save(os.path.join(DATA_DIR, 'X.npy'), X)
np.save(os.path.join(DATA_DIR, 'y.npy'), y)
print(f"Saved {X.shape[0]} samples to data/") 